(()=>{"use strict";var n={28:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([n.id,".header{\n    background-color: orange;\n    height:100px;\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: 1fr;\n}\n\n#navbar{\n    justify-self: right;\n    grid-column: 2/3;\n    display: flex;\n    gap: 30px;\n    margin-right: 30px;\n\n}\n\n.nav-item-container {\n    background-color: green;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    flex: 1;\n}\n\n\n\n#logo-container{\n    justify-self: left;\n    grid-column: 1/2;\n\n    background-color: pink;\n    height: 50px;\n    width: 100px;\n    margin: auto;\n    margin-left: 30px;\n}\n.section1{\n    background-color: green;\n    height: 400px;\n\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n}\n\n\n#section1-img{\n    width: auto;\n    height: 50vh;\n}\n\n.section2{\n    background-color: orange;\n    height: 400px;\n}\n\n.footer{\n    background-color: green;\n    height: 200px;\n}\n\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,YAAY;;IAEZ,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;AAC3B;;AAEA;IACI,mBAAmB;IACnB,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,kBAAkB;;AAEtB;;AAEA;IACI,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,OAAO;AACX;;;;AAIA;IACI,kBAAkB;IAClB,gBAAgB;;IAEhB,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,iBAAiB;AACrB;AACA;IACI,uBAAuB;IACvB,aAAa;;IAEb,aAAa;IACb,8BAA8B;AAClC;;;AAGA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,wBAAwB;IACxB,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,aAAa;AACjB",sourcesContent:[".header{\n    background-color: orange;\n    height:100px;\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: 1fr;\n}\n\n#navbar{\n    justify-self: right;\n    grid-column: 2/3;\n    display: flex;\n    gap: 30px;\n    margin-right: 30px;\n\n}\n\n.nav-item-container {\n    background-color: green;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    flex: 1;\n}\n\n\n\n#logo-container{\n    justify-self: left;\n    grid-column: 1/2;\n\n    background-color: pink;\n    height: 50px;\n    width: 100px;\n    margin: auto;\n    margin-left: 30px;\n}\n.section1{\n    background-color: green;\n    height: 400px;\n\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n}\n\n\n#section1-img{\n    width: auto;\n    height: 50vh;\n}\n\n.section2{\n    background-color: orange;\n    height: 400px;\n}\n\n.footer{\n    background-color: green;\n    height: 200px;\n}\n\n"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<n.length;d++){var u=[].concat(n[d]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var p=t(l),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var m=i(A,r);r.byIndex=c,e.splice(c,0,{identifier:l,updater:m,references:1})}a.push(l)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var c=t(o[a]);e[c].references--}for(var s=r(n,i),d=0;d<o.length;d++){var u=t(o[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),i=t.n(r),o=t(569),a=t.n(o),c=t(565),s=t.n(c),d=t(216),u=t.n(d),l=t(589),p=t.n(l),A=t(28),m={};function f(){const n=document.createElement("div"),e=document.createElement("div");e.className="section1",n.appendChild(e);const t=document.createElement("div"),r=document.createElement("h1");r.innerText="Pass All of Your Civil Engineering classes with A";const i=document.createElement("p");i.innerText="CivETech helps our students to gain the skills and knowledge to excel in every assignment and exams in all Civil Engineering subjects";const o=document.createElement("div");o.id="Section1-Button-Container";const a=document.createElement("button");a.id="Section1-Button1",a.innerText="Get started";const c=document.createElement("button");c.innerText="Learn more",c.id="Section1-Button2",o.appendChild(a),o.appendChild(c),t.appendChild(r),t.appendChild(i),t.appendChild(o);const s=document.createElement("div"),d=document.createElement("img");d.src="/src/img/wilson-main-image.png",d.id="section1-img",s.appendChild(d),e.appendChild(t),e.appendChild(s);const u=document.createElement("div");u.className="section2",n.appendChild(u);const l=document.createElement("div");return l.className="footer",n.appendChild(l),n}function g(){const n=document.createElement("div");return n.innerText="this is a Categories test",n}function h(){const n=document.createElement("div");return n.innerText="this is a Pricing test",n}function v(){const n=document.createElement("div");return n.innerText="this is a Get Started test",n}function C(){const n=document.createElement("div");return n.innerText="this is a About Us test",n}function x(){const n=document.createElement("div");return n.innerText="this is a Success Stories test",n}m.styleTagTransform=p(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=u(),e()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const B=document.querySelector("#content"),y=document.createElement("div","","header-container"),I=document.createElement("div","","middle-container"),b=document.createElement("div","","footer-container");function E(n,e){const t=n(),r=e;r.innerHTML="",r.appendChild(t)}B.appendChild(y),B.appendChild(I),B.appendChild(b),E((function(){const n=l("div","header"),e=l("div","","logo-container"),t=l("div","","navbar"),r=l("div","nav-item-container"),i=l("div","nav-item-container"),o=l("div","nav-item-container"),a=l("div","nav-item-container"),c=l("div","nav-item-container"),s=l("div","nav-item-container"),d=[r,i,o,a,c,s];l("a","nav-item","home-link","Home",r,"#",f),l("a","nav-item","categories-link","Categories",a,"#",g),l("a","nav-item","success-stories-link","Success Stores",o,"#",x),l("a","nav-item","pricing-link","Pricing",c,"#",h),l("a","nav-item","about-link","About",i,"#",C),l("a","nav-item","get-started-link","Get Started",s,"#",v);for(let n=0;n<d.length;n++)u=d[n],t.appendChild(u);var u;function l(n,e="#",t="#",r="",i,o,a){const c=document.createElement(n);return c.innerText=r,c.className=e,c.id=t,c.content=a,i&&i.appendChild(c),"a"===n&&o&&(c.href=o),c}return n.appendChild(e),n.appendChild(t),n}),y),E(f,I),document.querySelectorAll(".nav-item").forEach((n=>n.addEventListener("click",(()=>{E(n.content,I)}))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,